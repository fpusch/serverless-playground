service: serverless-playground

useDotenv: true

package:
  include:
    - dist/**.js
  exclude:
    - ./**.md
    - ./**.env*
    - ./tsconfig*.json
    - coverage/**
    - nest-cli.json
    - src/**
    - test/**

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, env:SLS_REGION}
  stage: ${opt:stage}
  apiGateway:
    shouldStartNameWithService: true
  deploymentBucket:
    name: ${env:SLS_DEPLOYMENT_BUCKET}
    blockPublicAccess: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: ${env:LAMBDA_AWS_NODEJS_CONNECTION_REUSE_ENABLED}
  iamRoleStatements: # IAM role statements so that services can be accessed in the AWS account
    - Effect: 'Allow'
      Action:
        - 's3:ListBucket'
        - 's3:GetObject'
        - 's3:PutObject'
      Resource: 
        - ${self:custom.ObjectsBucket.arn}
        - Fn::Join:
          - "" 
          - - ${self:custom.ObjectsBucket.arn}
            - /*
    - Effect: 'Allow'
      Action:
        - 'sqs:SendMessage'
      Resource:
        - ${self:custom.ObjectsQueue.arn}
    - Effect: 'Allow'
      Action:
        - 'dynamodb:BatchGetItem'
        - 'dynamodb:BatchWriteItem'
        - 'dynamodb:ConditionCheckItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:DescribeTable'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:GetItem'
        - 'dynamodb:Scan'
        - 'dynamodb:Query'
        - 'dynamodb:UpdateItem'
      Resource:
        - ${self:custom.ObjectsTable.arn}
  tags:
    app:environment: ${opt:stage, self:provider.stage}
    app:service: ${self:service}
    app:team: fpusch

custom:
  ObjectsBucket:
    arn:
      Fn::GetAtt:
        - ObjectsBucket
        - Arn
    name:
      Ref: ObjectsBucket
  ObjectsQueue:
    arn:
      Fn::GetAtt:
        - ObjectsQueue
        - Arn
    url:
      Ref: ObjectsQueue
  ObjectsTable:
    arn:
      Fn::GetAtt:
        - ObjectsTable
        - Arn
    name:
      Ref: ObjectsTable

functions:
  main:
    handler: dist/serverless.handler
    environment:
      S3_OBJECTS_BUCKET_NAME: ${self:custom.ObjectsBucket.name}
      SQS_OBJECTS_QUEUE_URL: ${self:custom.ObjectsQueue.url}
      DYNAMODB_OBJECTS_TABLE_NAME: ${self:custom.ObjectsTable.name}
    events:
      - http:
          method: any
          path: /{any+}

resources:
  Resources:
    ObjectsBucket: ${file(resources/objects-bucket.yaml):ObjectsBucket}
    ObjectsQueue: ${file(resources/objects-queue.yaml):ObjectsQueue}
    ObjectsTable: ${file(resources/objects-table.yaml):ObjectsTable}
